# Task ID: 7
# Title: Offer Capture Form with Normalization
# Status: done
# Dependencies: 6
# Priority: high
# Description: Create offer entry form with manual input, automatic unit conversion, and computed price-per-canonical-unit.
# Details:
Use Formik and Zod for validation. Auto-fill date. Link offers to inventory and supplier. Compute normalized price-per-unit (incl/excl shipping/tax). Store raw capture and computed fields. Support optional photo URI stub.

# Test Strategy:
E2E tests for offer entry. Unit tests for normalization logic and computed fields.

# Subtasks:
## 1. Design Offer Entry Form UI [done]
### Dependencies: None
### Description: Create the user interface for the offer capture form, including fields for manual input, unit selection, price, date, inventory, supplier, and optional photo URI.
### Details:
Ensure the form layout is user-friendly and supports all required fields. Prepare UI elements for future extensibility and canonical unit display.
<info added on 2025-09-06T02:11:38.568Z>
Initial exploration and analysis of existing form patterns is complete. InventoryItemForm and SupplierForm both use Formik for form management, with consistent UI patterns such as ScrollView layouts, fixed button containers, Apple-like design elements, and reusable input components. The Offer form requires core fields for inventory item, supplier, price, currency, amount, unit, and observed date, plus optional fields for supplier URL, source type, tax, shipping, quality rating, notes, and photo URI. Technical considerations include repository access for dropdowns, canonical unit and currency validation, date handling, and adherence to Formik validation patterns. Next steps: create OfferForm.tsx using established patterns, implement selection and picker components, add date picker, integrate unit/currency validation, and test submission flow.
</info added on 2025-09-06T02:11:38.568Z>
<info added on 2025-09-06T02:13:16.111Z>
OfferForm.tsx implementation is complete with all required and optional fields, following established UI and validation patterns. The form uses Formik for state management, TypeScript interfaces for OfferInput, and provides chip-based selection for common values. Responsive layout, error handling, and user feedback are in place. Files updated: OfferForm.tsx, forms index, and UI index. The form is ready for integration, with placeholders for future picker enhancements. Design is consistent with existing forms and supports extensibility.
</info added on 2025-09-06T02:13:16.111Z>

## 2. Integrate Formik and Zod for Validation [done]
### Dependencies: 7.1
### Description: Implement form state management and validation using Formik and Zod, enforcing required fields, correct data types, and business rules.
### Details:
Define Zod schemas for validation and connect them to Formik. Display validation errors inline and ensure type safety throughout the form.
<info added on 2025-09-06T02:33:16.030Z>
Task 7.2 implementation is complete. Developed a comprehensive Zod validation schema for OfferForm input, enforcing all required and optional field constraints, ISO currency and UUID validation, and clear error messaging. Integrated Zod validation with Formik using custom utilities for error conversion and type safety. Replaced manual validation in OfferForm with Zod-based logic, ensuring robust error handling and user feedback. Added 12 unit tests covering all validation scenarios, with all tests passing. The form now provides type-safe, business rule-compliant validation and is ready for the next subtask (7.3) focused on auto-fill and linking logic.
</info added on 2025-09-06T02:33:16.030Z>

## 3. Implement Auto-Fill and Linking Logic [done]
### Dependencies: 7.2
### Description: Add logic to auto-fill the current date, and enable linking of offers to inventory items and suppliers within the form.
### Details:
Ensure the date field defaults to today and is editable. Provide dropdowns or selectors for inventory and supplier linkage, fetching data as needed.
<info added on 2025-09-06T02:41:33.870Z>
Auto-fill and linking logic implemented: observed_at field now auto-fills with current date/time in ISO format and is editable via a custom DatePicker supporting "Now," "Today," and manual ISO input. Introduced reusable Picker component for inventory and supplier selection, with integrated repository access, search, empty state, and error handling. Inventory picker displays item name and category; supplier picker shows name and country/region. Deleted items and suppliers are filtered out. Supplier name snapshot is captured on selection. Form supports both prop-based and auto-fetch data, with retry on fetch errors. All new components are unit tested for auto-fill, repository integration, picker behavior, validation, and submission, with no TypeScript errors. OfferForm now uses these new components for a seamless user experience.
</info added on 2025-09-06T02:41:33.870Z>

## 4. Compute Normalized Price-Per-Unit [done]
### Dependencies: 7.3
### Description: Develop logic to automatically convert entered units to canonical units and compute the normalized price-per-unit, including/excluding shipping and tax.
### Details:
Integrate with unit conversion utilities. Calculate and display normalized price fields in real time as the user enters data.

## 5. Store Raw and Computed Fields [done]
### Dependencies: 7.4
### Description: Implement logic to persist both the raw user input and the computed/normalized fields in the local storage layer.
### Details:
Ensure all relevant data is saved, including canonical units, computed prices, and links to inventory and supplier. Use repository pattern for storage abstraction.
<info added on 2025-09-06T02:55:57.484Z>
Task 7.5 implementation is complete. The offer storage flow now captures and persists both raw user input and all computed/normalized fields, including canonical units and normalized prices, using the repository pattern for storage abstraction. OfferFormPreviewScreen now submits data via OfferRepository.createOffer, which performs inventory lookup, unit conversion, price normalization (including shipping), and error handling before saving to storage. RepositoryFactory manages OfferRepository instantiation with lazy loading. Comprehensive unit tests verify correct storage of all fields, error scenarios, and price normalization logic. All tests pass and the feature is fully functional.
</info added on 2025-09-06T02:55:57.484Z>

## 6. Add Optional Photo URI Stub and Write Tests [done]
### Dependencies: 7.5
### Description: Add support for an optional photo URI field and implement unit and E2E tests for form logic, normalization, and computed fields.
### Details:
Allow users to optionally attach a photo URI. Write comprehensive tests for all form features, including validation, normalization, and storage.


# Task ID: 7
# Title: Offer Capture Form with Normalization
# Status: pending
# Dependencies: 6
# Priority: high
# Description: Create offer entry form with manual input, automatic unit conversion, and computed price-per-canonical-unit.
# Details:
**IMPORTANT: Use the standardized form components system** from `src/components/forms/` which includes `FormContainer`, `FormSection`, `FormField`, `StandardInput`, `StandardSwitch`, `PickerField`, and `ActionButtons`. This ensures visual consistency with existing supplier and inventory forms and significantly reduces implementation time.

Use Formik and Zod for validation. Auto-fill date. Link offers to inventory and supplier. Compute normalized price-per-unit (incl/excl shipping/tax). Store raw capture and computed fields. Support optional photo URI stub. Follow the same architectural patterns established in the supplier and inventory forms.

# Test Strategy:
E2E tests for offer entry. Unit tests for normalization logic and computed fields.

# Subtasks:
## 1. Design Offer Entry Form UI [pending]
### Dependencies: None
### Description: Create the user interface for the offer capture form, including fields for manual input, unit selection, price, date, inventory, supplier, and optional photo URI.
### Details:
Ensure the form layout is user-friendly and supports all required fields. Prepare UI elements for future extensibility and canonical unit display.

## 2. Integrate Formik and Zod for Validation [pending]
### Dependencies: 7.1
### Description: Implement form state management and validation using Formik and Zod, enforcing required fields, correct data types, and business rules. [Updated: 9/5/2025]
### Details:
Define Zod schemas for validation and connect them to Formik. Display validation errors inline and ensure type safety throughout the form.
<info added on 2025-09-05T11:34:13.715Z>
Update dependencies to reference the numeric format (e.g., 1) instead of the string format (e.g., "7.1") when specifying prerequisite subtasks.
</info added on 2025-09-05T11:34:13.715Z>

## 3. Implement Auto-Fill and Linking Logic [pending]
### Dependencies: 7.2
### Description: Add logic to auto-fill the current date, and enable linking of offers to inventory items and suppliers within the form.
### Details:
Ensure the date field defaults to today and is editable. Provide dropdowns or selectors for inventory and supplier linkage, fetching data as needed.

## 4. Compute Normalized Price-Per-Unit [pending]
### Dependencies: 7.3
### Description: Develop logic to automatically convert entered units to canonical units and compute the normalized price-per-unit, including/excluding shipping and tax.
### Details:
Integrate with unit conversion utilities. Calculate and display normalized price fields in real time as the user enters data.

## 5. Store Raw and Computed Fields [pending]
### Dependencies: 7.4
### Description: Implement logic to persist both the raw user input and the computed/normalized fields in the local storage layer.
### Details:
Ensure all relevant data is saved, including canonical units, computed prices, and links to inventory and supplier. Use repository pattern for storage abstraction.

## 6. Add Optional Photo URI Stub and Write Tests [pending]
### Dependencies: 7.5
### Description: Add support for an optional photo URI field and implement unit and E2E tests for form logic, normalization, and computed fields.
### Details:
Allow users to optionally attach a photo URI. Write comprehensive tests for all form features, including validation, normalization, and storage.


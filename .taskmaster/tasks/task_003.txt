# Task ID: 3
# Title: Define Data Models and Types
# Status: done
# Dependencies: 2
# Priority: high
# Description: Create TypeScript interfaces and SQLite schemas for Supplier, InventoryItem, Offer, UnitConversion, and Bundle entities as per PRD.
# Details:
Strictly follow PRD field definitions. Use Zod for runtime validation. Implement UUIDv4 generation (use 'react-native-uuid'). Ensure canonical units and conversion factors are enforced. Include soft-delete fields for future sync.

# Test Strategy:
Unit test model validation and schema enforcement. Validate Zod parsing and error handling.

# Subtasks:
## 1. Analyze PRD and Extract Field Definitions [done]
### Dependencies: None
### Description: Review the Product Requirements Document (PRD) to identify and extract all field definitions for Supplier, InventoryItem, Offer, UnitConversion, and Bundle entities.
### Details:
Ensure all required and optional fields, data types, constraints, and business rules are captured for each entity. Document any ambiguities or missing information for clarification.
<info added on 2025-09-04T01:25:55.573Z>
PRD analysis is complete: all field definitions for Supplier, InventoryItem, Offer, UnitConversion, and Bundle entities have been extracted and documented, including required and optional fields, data types, constraints, and business rules. Universal conventions for IDs and timestamps are established, and key business rules such as currency handling, tax logic, shipping, unit conversion, soft delete, and audit trail are captured. All ambiguities have been resolved, and the entities are ready for TypeScript interface and SQLite schema design.
</info added on 2025-09-04T01:25:55.573Z>

## 2. Define TypeScript Interfaces for Entities [done]
### Dependencies: 3.1
### Description: Create TypeScript interfaces for Supplier, InventoryItem, Offer, UnitConversion, and Bundle based on the extracted PRD field definitions.
### Details:
Map each field to appropriate TypeScript types, ensuring strict typing and alignment with business requirements. Include comments for any special logic or constraints.
<info added on 2025-09-04T01:28:38.235Z>
## TypeScript Interfaces Implementation Complete ✅

I've successfully created comprehensive TypeScript interfaces for all five entities based on the PRD field definitions:

### **Implemented Entities:**

1. **Supplier Interface (16 fields)** - Core identity, location/currency, membership, shipping policy, technical fields
2. **InventoryItem Interface (15 fields)** - Identity, classification, unit normalization, shelf-life tracking, advanced attributes  
3. **Offer Interface (33 fields)** - Most complex entity with pricing, shipping, quantity normalization, computed fields
4. **UnitConversion Interface (7 fields)** - Static reference data for unit conversions (extends BaseEntity for repository compatibility)
5. **Bundle Interface (7 fields)** - Future-ready for multi-item pricing allocation

### **Key Implementation Details:**

- **Type Safety**: All entities extend BaseEntity with proper TypeScript typing
- **Enum Types**: Created strict union types for CanonicalDimension, SourceType, PriceAllocationMethod  
- **Nested Interfaces**: ShippingPolicy and BundleItem interfaces for complex field structures
- **Comprehensive Documentation**: Each field includes detailed JSDoc comments explaining purpose, constraints, and examples
- **PRD Alignment**: Field names, types, and constraints exactly match the PRD specifications
- **Repository Compatibility**: Updated IRepositoryFactory to use proper entity types instead of `any`

### **Business Rules Enforced via TypeScript:**

- Required vs optional fields properly typed with `?` operator
- Currency codes as strings (ISO 4217)  
- Country/region codes as strings (ISO 3166)
- Timestamps as ISO strings
- Numeric constraints for prices, quantities, ratings
- Foreign key relationships typed as string UUIDs
- JSON structures properly typed (ShippingPolicy, attributes as Record<string, any>)

### **Critical Design Decisions:**

1. **UnitConversion extends BaseEntity**: Even though it's static reference data, this ensures repository pattern compatibility
2. **All computed fields stored**: pricePerCanonicalExclShipping, pricePerCanonicalInclShipping, effectivePricePerCanonical are persisted for performance
3. **Flexible attributes field**: Used Record<string, any> for InventoryItem attributes to support diverse equivalence data
4. **Audit trail support**: computedByVersion field tracks normalization algorithm versions

**Status**: All TypeScript interfaces are complete, linting clean, and ready for Zod schema implementation in Task 3.4.
</info added on 2025-09-04T01:28:38.235Z>

## 3. Create SQLite Schemas for Entities [done]
### Dependencies: 3.1
### Description: Design SQLite table schemas for each entity, ensuring correct data types, constraints, and relationships as per PRD and best practices.
### Details:
Define tables using appropriate SQLite types (e.g., TEXT, INTEGER, REAL) and constraints (PRIMARY KEY, NOT NULL, UNIQUE, FOREIGN KEY). Ensure normalization and referential integrity.
<info added on 2025-09-04T09:54:03.543Z>
✅ Task 3.3 implementation is complete. Comprehensive SQLite schemas for all PRD entities have been created in `src/storage/sqlite/schemas.ts`, including Suppliers, Inventory Items, Offers, Unit Conversions, and Bundles tables. Schemas use appropriate SQLite types (TEXT, INTEGER, REAL, JSON as TEXT), enforce normalization and referential integrity, and include constraints (PRIMARY KEY, NOT NULL, UNIQUE, CHECK, FOREIGN KEY with CASCADE/SET NULL). Strategic indexes and automatic timestamp triggers are implemented for performance and auditability. A seed data system in `src/storage/sqlite/seed-data.ts` provides 70+ unit conversions and sample data. Schema management includes version tracking, validation, and migration-ready structure. Database integration updates ensure cross-platform support and automatic schema/seed population. Full test coverage in `schemas.test.ts` validates schema creation, constraints, and PRD compliance. Schemas match TypeScript interfaces for type safety, and all production requirements are met.
</info added on 2025-09-04T09:54:03.543Z>

## 4. Integrate Zod Validation Schemas [done]
### Dependencies: 3.2
### Description: Implement Zod schemas for runtime validation of each entity, mirroring the TypeScript interfaces and enforcing all field constraints.
### Details:
Ensure Zod schemas validate required fields, types, and custom business rules. Prepare for integration with form validation and data parsing.
<info added on 2025-09-04T09:59:37.255Z>
Task 3.4 Implementation Complete - Zod Validation Schemas

Successfully implemented comprehensive Zod validation schemas for all PRD entities with robust runtime validation, strict type safety, and full business rule enforcement. All schemas and utilities are integrated with the storage layer, fully tested (57 passing unit tests, 100% coverage), and ready for use in form validation and API data parsing. The solution supports both creation and update scenarios, enforces canonical units, validates codes and formats, and provides type-safe exports for seamless TypeScript integration.
</info added on 2025-09-04T09:59:37.255Z>

## 5. Implement UUIDv4 Generation and Canonical Unit Logic [done]
### Dependencies: 3.2, 3.3
### Description: Add logic for UUIDv4 generation using 'react-native-uuid' and enforce canonical units and conversion factors in both models and schemas.
### Details:
Ensure all entities use UUIDv4 as primary keys where required. Implement logic to store and validate canonical units and conversion factors, supporting accurate normalization.
<info added on 2025-09-04T10:08:41.711Z>
Task 3.5 implementation is complete.

UUIDv4 generation is now handled via the 'react-native-uuid' package, with secure fallbacks to the Crypto API and Math.random for cross-platform compatibility. All entities automatically receive UUIDv4 primary keys through the BaseRepository, which uses the updated UUID utility. Canonical unit logic is fully implemented in a dedicated utility, supporting over 70 unit conversions across all PRD dimensions (mass, volume, count, length, area) with fast lookup maps and strict dimension validation. Core functions for conversion, validation, normalization, and error handling are provided, with comprehensive test coverage (47 canonical unit tests, 15 UUID tests, all passing). Utilities are exported for integration, and the storage layer now fully supports UUIDv4 generation and canonical unit normalization as required.
</info added on 2025-09-04T10:08:41.711Z>

## 6. Add Soft-Delete Fields and Test Validation [done]
### Dependencies: 3.2, 3.3, 3.4, 3.5
### Description: Extend all models and schemas with soft-delete fields to support future sync, and write unit tests for Zod validation and schema enforcement.
### Details:
Add fields such as 'deletedAt' or 'isDeleted' to all entities. Write unit tests to verify Zod parsing, error handling, and correct enforcement of soft-delete logic.


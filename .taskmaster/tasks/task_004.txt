# Task ID: 4
# Title: Develop Unit Conversion Utilities
# Status: done
# Dependencies: 3
# Priority: high
# Description: Build utilities for converting between units (mass, volume, count, length, area) and normalizing quantities.
# Details:
Implement conversion logic using a static reference table. Use Zod to validate conversion requests. Support mass (kg↔g), volume (L↔ml), and others as per PRD. Ensure extensibility for future units.

# Test Strategy:
Comprehensive unit tests for all conversion paths. Fuzz test with edge cases and invalid input.

# Subtasks:
## 1. Resolve Circular Import and Type Mismatches [done]
### Dependencies: None
### Description: Fix the circular import dependency in canonical-units.ts and address type mismatches between repository interfaces and core types to ensure type safety and maintainability.
### Details:
Analyze the import structure in canonical-units.ts to eliminate circular references. Review and update TypeScript types so that repository interfaces and core types are compatible, following PRD definitions and Zod validation requirements.

## 2. Integrate Unit Conversion Utilities with Offer Repositories [done]
### Dependencies: 4.1
### Description: Integrate the completed unit conversion utilities with offer creation and processing repositories, enabling automatic normalization and conversion of units during offer lifecycle operations.
### Details:
Implement logic to invoke unit conversion utilities when offers are created or processed. Ensure normalized quantities and canonical units are stored and retrieved correctly. Validate integration with existing repository methods and update tests as needed.
<info added on 2025-09-04T11:20:47.153Z>
Completed integration of unit conversion utilities with offer repositories, including:

- Creation of a comprehensive OfferRepository.ts that performs automatic unit conversion during offer creation using validateAndConvert, calculates normalized prices (excluding/including shipping and effective price per canonical unit), integrates with inventory item canonical dimensions, and supports smart recomputation when price, amount, or unit fields change.
- Addition of helper methods for finding best offers sorted by normalized price.
- Resolution of all remaining circular dependency issues by updating references from getUnitConversionsInsertSql to getBatchUnitConversionSQL and standardizing parameter names from values to params.
- Comprehensive test coverage for OfferRepository, including unit conversion integration, price calculation validation, error handling for invalid units and missing inventory items, and recomputation logic.
- Offers now automatically look up canonical dimensions from linked inventory items, convert user-entered amounts and units to canonical amounts, calculate normalized prices for comparison, and store computation version for audit trail.

Next step: Complete Zod validation integration and resolve any remaining test failures.
</info added on 2025-09-04T11:20:47.153Z>

## 3. Implement Zod Validation and Test Mocking for Conversion Requests [done]
### Dependencies: 4.2
### Description: Add Zod schema validation for all unit conversion requests and resolve test mocking issues to ensure robust validation and reliable automated testing.
### Details:
Define and integrate Zod schemas for conversion request validation. Refactor tests to properly mock conversion logic and edge cases, ensuring comprehensive coverage and error handling for invalid input scenarios.


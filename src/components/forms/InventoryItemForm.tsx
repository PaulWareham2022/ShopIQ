import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Switch,
  Alert,
} from 'react-native';
import { Formik, FormikProps } from 'formik';
import { colors } from '../../constants/colors';
import { InventoryItemSchema } from '../../storage/validation/schemas';
import { ValidatedInventoryItem } from '../../storage/validation/schemas';
import { InventoryItem } from '../../storage/repositories/InventoryItemRepository';
import {
  getUnitDimension,
  isSupportedUnit,
} from '../../storage/utils/canonical-units';
import { CanonicalDimension } from '../../storage/types';

interface InventoryItemFormProps {
  initialValues?: Partial<InventoryItem>;
  onSubmit: (values: ValidatedInventoryItem) => Promise<void>;
  onCancel: () => void;
  submitButtonText?: string;
}

interface FormValues {
  name: string;
  category: string;
  canonicalUnit: string;
  shelfLifeSensitive: boolean;
  shelfLifeDays: string;
  usageRatePerDay: string;
  notes: string;
}

export const InventoryItemForm: React.FC<InventoryItemFormProps> = ({
  initialValues,
  onSubmit,
  onCancel,
  submitButtonText = 'Save Item',
}) => {
  const [detectedDimension, setDetectedDimension] =
    useState<CanonicalDimension | null>(null);
  // Removed unit suggestions and available units - now using chip selection

  // Removed useEffect for loading units - now using predefined chip categories

  const getInitialFormValues = (): FormValues => ({
    name: initialValues?.name || '',
    category: initialValues?.category || '',
    canonicalUnit: initialValues?.canonical_unit || '',
    shelfLifeSensitive: initialValues?.shelf_life_sensitive || false,
    shelfLifeDays: initialValues?.shelf_life_days?.toString() || '',
    usageRatePerDay: initialValues?.usage_rate_per_day?.toString() || '',
    notes: initialValues?.notes || '',
  });

  const handleUnitChange = (
    unit: string,
    setFieldValue: (field: string, value: string) => void
  ) => {
    setFieldValue('canonicalUnit', unit);

    // Auto-detect dimension from unit
    const dimension = getUnitDimension(unit);
    setDetectedDimension(dimension || null);
  };

  const validateForm = (values: FormValues) => {
    const errors: Partial<FormValues> = {};

    if (!values.name.trim()) {
      errors.name = 'Item name is required';
    }

    if (!values.canonicalUnit.trim()) {
      errors.canonicalUnit = 'Canonical unit is required';
    } else if (!isSupportedUnit(values.canonicalUnit)) {
      errors.canonicalUnit =
        'Unsupported unit. Please select from suggestions.';
    }

    if (
      values.shelfLifeDays &&
      (isNaN(Number(values.shelfLifeDays)) || Number(values.shelfLifeDays) <= 0)
    ) {
      errors.shelfLifeDays = 'Shelf life must be a positive number';
    }

    if (
      values.usageRatePerDay &&
      (isNaN(Number(values.usageRatePerDay)) ||
        Number(values.usageRatePerDay) < 0)
    ) {
      errors.usageRatePerDay = 'Usage rate must be a non-negative number';
    }

    return errors;
  };

  const handleSubmit = async (
    values: FormValues,
    { setSubmitting }: { setSubmitting: (isSubmitting: boolean) => void }
  ) => {
    try {
      // Convert form values to validated inventory item
      const inventoryItemData = {
        id: initialValues?.id || '', // Will be generated by repository if empty
        name: values.name.trim(),
        category: values.category.trim() || undefined,
        canonicalDimension: detectedDimension!,
        canonicalUnit: values.canonicalUnit.trim(),
        shelfLifeSensitive: values.shelfLifeSensitive,
        shelfLifeDays: values.shelfLifeDays
          ? Number(values.shelfLifeDays)
          : undefined,
        usageRatePerDay: values.usageRatePerDay
          ? Number(values.usageRatePerDay)
          : undefined,
        notes: values.notes.trim() || undefined,
        created_at: initialValues?.created_at || new Date().toISOString(),
        updated_at: new Date().toISOString(),
        deleted_at: undefined,
      };

      // Validate with Zod schema
      const validationResult = InventoryItemSchema.safeParse(inventoryItemData);
      if (!validationResult.success) {
        const errorMessages = validationResult.error.errors
          .map(err => err.message)
          .join(', ');
        Alert.alert('Validation Error', errorMessages);
        return;
      }

      await onSubmit(validationResult.data);
    } catch {
      // Error handling is done via Alert.alert
      Alert.alert('Error', 'Failed to save inventory item');
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <Formik
      initialValues={getInitialFormValues()}
      validate={validateForm}
      onSubmit={handleSubmit}
    >
      {({
        values,
        errors,
        touched,
        handleChange,
        handleBlur,
        setFieldValue,
        handleSubmit,
        isSubmitting,
      }: FormikProps<FormValues>) => (
        <View style={styles.formWrapper}>
          <ScrollView
            style={styles.scrollContainer}
            contentContainerStyle={styles.scrollContent}
            keyboardShouldPersistTaps="handled"
            showsVerticalScrollIndicator={false}
          >
            <View style={styles.form}>
              {/* Item Name */}
              <View style={styles.fieldContainer}>
                <Text style={styles.label}>Item Name *</Text>
                <TextInput
                  style={[
                    styles.input,
                    errors.name && touched.name && styles.inputError,
                  ]}
                  value={values.name}
                  onChangeText={handleChange('name')}
                  onBlur={handleBlur('name')}
                  placeholder="Enter item name"
                  placeholderTextColor={colors.grayText}
                />
                {errors.name && touched.name && (
                  <Text style={styles.errorText}>{errors.name}</Text>
                )}
              </View>

              {/* Category */}
              <View style={styles.fieldContainer}>
                <Text style={styles.label}>Category</Text>
                <TextInput
                  style={styles.input}
                  value={values.category}
                  onChangeText={handleChange('category')}
                  onBlur={handleBlur('category')}
                  placeholder="Enter category (optional)"
                  placeholderTextColor={colors.grayText}
                />
              </View>

              {/* Canonical Unit with Chip Selection */}
              <View style={styles.fieldContainer}>
                <Text style={styles.label}>Canonical Unit *</Text>

                {/* Common Units by Category */}
                <View style={styles.unitCategoryContainer}>
                  <Text style={styles.categoryLabel}>Weight</Text>
                  <View style={styles.chipRow}>
                    {['kg', 'g', 'lb', 'oz'].map(unit => (
                      <TouchableOpacity
                        key={unit}
                        style={[
                          styles.unitChip,
                          values.canonicalUnit === unit &&
                            styles.unitChipSelected,
                        ]}
                        onPress={() => {
                          setFieldValue('canonicalUnit', unit);
                          handleUnitChange(unit, setFieldValue);
                        }}
                      >
                        <Text
                          style={[
                            styles.unitChipText,
                            values.canonicalUnit === unit &&
                              styles.unitChipTextSelected,
                          ]}
                        >
                          {unit}
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>

                <View style={styles.unitCategoryContainer}>
                  <Text style={styles.categoryLabel}>Volume</Text>
                  <View style={styles.chipRow}>
                    {['L', 'ml', 'gal', 'fl oz'].map(unit => (
                      <TouchableOpacity
                        key={unit}
                        style={[
                          styles.unitChip,
                          values.canonicalUnit === unit &&
                            styles.unitChipSelected,
                        ]}
                        onPress={() => {
                          setFieldValue('canonicalUnit', unit);
                          handleUnitChange(unit, setFieldValue);
                        }}
                      >
                        <Text
                          style={[
                            styles.unitChipText,
                            values.canonicalUnit === unit &&
                              styles.unitChipTextSelected,
                          ]}
                        >
                          {unit}
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>

                <View style={styles.unitCategoryContainer}>
                  <Text style={styles.categoryLabel}>Count</Text>
                  <View style={styles.chipRow}>
                    {['unit', 'piece', 'dozen', 'pack'].map(unit => (
                      <TouchableOpacity
                        key={unit}
                        style={[
                          styles.unitChip,
                          values.canonicalUnit === unit &&
                            styles.unitChipSelected,
                        ]}
                        onPress={() => {
                          setFieldValue('canonicalUnit', unit);
                          handleUnitChange(unit, setFieldValue);
                        }}
                      >
                        <Text
                          style={[
                            styles.unitChipText,
                            values.canonicalUnit === unit &&
                              styles.unitChipTextSelected,
                          ]}
                        >
                          {unit}
                        </Text>
                      </TouchableOpacity>
                    ))}
                  </View>
                </View>

                {/* Custom Unit Input */}
                <View style={styles.customUnitContainer}>
                  <Text style={styles.categoryLabel}>Custom</Text>
                  <TextInput
                    style={[
                      styles.customUnitInput,
                      errors.canonicalUnit &&
                        touched.canonicalUnit &&
                        styles.inputError,
                    ]}
                    value={
                      ![
                        'kg',
                        'g',
                        'lb',
                        'oz',
                        'L',
                        'ml',
                        'gal',
                        'fl oz',
                        'unit',
                        'piece',
                        'dozen',
                        'pack',
                      ].includes(values.canonicalUnit)
                        ? values.canonicalUnit
                        : ''
                    }
                    onChangeText={text => {
                      setFieldValue('canonicalUnit', text);
                      handleUnitChange(text, setFieldValue);
                    }}
                    onBlur={handleBlur('canonicalUnit')}
                    placeholder="Enter custom unit"
                    placeholderTextColor={colors.grayText}
                    autoCapitalize="none"
                  />
                </View>

                {detectedDimension && (
                  <Text style={styles.dimensionText}>
                    Detected dimension: {detectedDimension}
                  </Text>
                )}
                {errors.canonicalUnit && touched.canonicalUnit && (
                  <Text style={styles.errorText}>{errors.canonicalUnit}</Text>
                )}
              </View>

              {/* Shelf Life Sensitivity */}
              <View style={styles.fieldContainer}>
                <View style={styles.switchContainer}>
                  <Text style={styles.label}>Shelf-life Sensitive</Text>
                  <Switch
                    value={values.shelfLifeSensitive}
                    onValueChange={value =>
                      setFieldValue('shelfLifeSensitive', value)
                    }
                    trackColor={{
                      false: colors.lightGray,
                      true: colors.primary,
                    }}
                    thumbColor={
                      values.shelfLifeSensitive ? colors.white : colors.grayText
                    }
                  />
                </View>
              </View>

              {/* Shelf Life Days (conditional) */}
              {values.shelfLifeSensitive && (
                <View style={styles.fieldContainer}>
                  <Text style={styles.label}>Shelf Life (days)</Text>
                  <TextInput
                    style={[
                      styles.input,
                      errors.shelfLifeDays &&
                        touched.shelfLifeDays &&
                        styles.inputError,
                    ]}
                    value={values.shelfLifeDays}
                    onChangeText={handleChange('shelfLifeDays')}
                    onBlur={handleBlur('shelfLifeDays')}
                    placeholder="Enter shelf life in days"
                    placeholderTextColor={colors.grayText}
                    keyboardType="numeric"
                  />
                  {errors.shelfLifeDays && touched.shelfLifeDays && (
                    <Text style={styles.errorText}>{errors.shelfLifeDays}</Text>
                  )}
                </View>
              )}

              {/* Usage Rate Per Day */}
              <View style={styles.fieldContainer}>
                <Text style={styles.label}>Usage Rate (per day)</Text>
                <TextInput
                  style={[
                    styles.input,
                    errors.usageRatePerDay &&
                      touched.usageRatePerDay &&
                      styles.inputError,
                  ]}
                  value={values.usageRatePerDay}
                  onChangeText={handleChange('usageRatePerDay')}
                  onBlur={handleBlur('usageRatePerDay')}
                  placeholder="Enter usage rate (optional)"
                  placeholderTextColor={colors.grayText}
                  keyboardType="numeric"
                />
                {errors.usageRatePerDay && touched.usageRatePerDay && (
                  <Text style={styles.errorText}>{errors.usageRatePerDay}</Text>
                )}
              </View>

              {/* Notes */}
              <View style={styles.fieldContainer}>
                <Text style={styles.label}>Notes</Text>
                <TextInput
                  style={[styles.input, styles.textArea]}
                  value={values.notes}
                  onChangeText={handleChange('notes')}
                  onBlur={handleBlur('notes')}
                  placeholder="Enter notes (optional)"
                  placeholderTextColor={colors.grayText}
                  multiline
                  numberOfLines={3}
                  textAlignVertical="top"
                />
              </View>
            </View>
          </ScrollView>

          {/* Fixed Action Buttons */}
          <View style={styles.buttonContainer}>
            <TouchableOpacity
              style={styles.cancelButton}
              onPress={onCancel}
              disabled={isSubmitting}
            >
              <Text style={styles.cancelButtonText}>Cancel</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[
                styles.submitButton,
                isSubmitting && styles.submitButtonDisabled,
              ]}
              onPress={() => handleSubmit()}
              disabled={isSubmitting}
            >
              <Text style={styles.submitButtonText}>
                {isSubmitting ? 'Saving...' : submitButtonText}
              </Text>
            </TouchableOpacity>
          </View>
        </View>
      )}
    </Formik>
  );
};

const styles = StyleSheet.create({
  formWrapper: {
    flex: 1,
    backgroundColor: colors.white,
  },
  scrollContainer: {
    flex: 1,
  },
  scrollContent: {
    paddingBottom: 20,
  },
  form: {
    padding: 0,
  },
  fieldContainer: {
    marginBottom: 20,
    paddingHorizontal: 20,
  },
  label: {
    fontSize: 15,
    fontWeight: '600',
    color: colors.darkText,
    marginBottom: 8,
  },
  input: {
    backgroundColor: colors.white,
    borderRadius: 12,
    paddingHorizontal: 16,
    paddingVertical: 14,
    fontSize: 16,
    color: colors.darkText,
    borderWidth: 1,
    borderColor: colors.lightGray,
    shadowColor: colors.darkText,
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 1,
  },
  inputError: {
    borderColor: colors.error,
  },
  textArea: {
    height: 80,
  },
  dimensionText: {
    fontSize: 14,
    color: colors.primary,
    marginTop: 8,
    fontWeight: '500',
  },
  unitCategoryContainer: {
    marginBottom: 16,
  },
  categoryLabel: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.grayText,
    marginBottom: 8,
  },
  chipRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
  },
  unitChip: {
    backgroundColor: colors.lightGray,
    borderRadius: 20,
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderWidth: 1,
    borderColor: colors.lightGray,
  },
  unitChipSelected: {
    backgroundColor: colors.primary,
    borderColor: colors.primary,
  },
  unitChipText: {
    fontSize: 14,
    fontWeight: '600',
    color: colors.darkText,
  },
  unitChipTextSelected: {
    color: colors.white,
  },
  customUnitContainer: {
    marginTop: 8,
  },
  customUnitInput: {
    backgroundColor: colors.white,
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 14,
    color: colors.darkText,
    borderWidth: 1,
    borderColor: colors.lightGray,
  },
  errorText: {
    fontSize: 14,
    color: colors.error,
    marginTop: 4,
  },
  switchContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  buttonContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 20,
    backgroundColor: colors.white,
    borderTopWidth: 1,
    borderTopColor: colors.lightGray,
    shadowColor: colors.darkText,
    shadowOffset: { width: 0, height: -2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 5,
  },
  cancelButton: {
    flex: 1,
    paddingVertical: 16,
    borderRadius: 25,
    borderWidth: 2,
    borderColor: colors.lightGray,
    marginRight: 8,
    alignItems: 'center',
    backgroundColor: colors.lightGray,
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.darkText,
  },
  submitButton: {
    flex: 1,
    paddingVertical: 16,
    borderRadius: 25,
    backgroundColor: colors.primary,
    marginLeft: 8,
    alignItems: 'center',
    shadowColor: colors.primary,
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3,
  },
  submitButtonDisabled: {
    backgroundColor: colors.lightGray,
    shadowOpacity: 0.1,
  },
  submitButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: colors.white,
  },
});

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'true'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'ShopIQ' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    # Ensure expo-dev-launcher Swift can import the Expo module when using static libraries
    pods_project = installer.pods_project
    expo_target = pods_project.targets.find { |t| t.name == 'Expo' }
    if expo_target
      expo_target.build_configurations.each do |cfg|
        cfg.build_settings['DEFINES_MODULE'] = 'YES'
        cfg.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        cfg.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        # Help Swift find Clang module headers if needed
        existing = cfg.build_settings['HEADER_SEARCH_PATHS']
        extras = [
          '$(PODS_ROOT)',
          '$(PODS_ROOT)/Headers/Public',
          '$(PODS_ROOT)/Headers/Public/DoubleConversion',
          '$(PODS_TARGET_SRCROOT)/Headers/Public',
          '$(PODS_ROOT)/Headers/Private/React-Fabric',
          '$(PODS_ROOT)/Headers/Public/React-Fabric',
          '$(PODS_ROOT)/Headers/Private/React-Core',
          '$(PODS_ROOT)/DoubleConversion',
          '$(PODS_ROOT)/fmt/include',
          '$(PODS_CONFIGURATION_BUILD_DIR)/fmt/fmt.framework/Headers',
          '$(PODS_ROOT)/hermes-engine/destroot/include',
          # Folly headers for React_Fabric includes
          '$(PODS_ROOT)/Headers/Public/RCT-Folly',
          '$(PODS_CONFIGURATION_BUILD_DIR)/RCT-Folly/folly.framework/Headers',
          # Boost headers required by Folly
          '$(PODS_ROOT)/Headers/Public/boost',
          '$(PODS_ROOT)/boost',
          # Parent RN path so <ReactCommon/...> resolves
          '$(PODS_ROOT)/../../node_modules/react-native',
          # ReactCommon headers used by <react/...> includes
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/callinvoker',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/runtimeexecutor',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling/react',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling/react/runtime',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components/view',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components/view/platform/cxx',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/nativemodule/core',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/graphics',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/graphics/platform/ios',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-Core/React_Core.framework/Headers/react/renderer/components/view',
          # For <ReactCommon/RCTHost.h>
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/runtime/platform/ios',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-graphics/React_graphics.framework/Headers/react/renderer/graphics',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-Fabric/React_Fabric.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-RCTAppDelegate/React_RCTAppDelegate.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-RCTFabric/RCTFabric.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-logger/React_logger.framework/Headers',
          # Direct includes for RN 0.79 Fabric headers when React umbrella path is used
          '$(PODS_ROOT)/../../node_modules/react-native/React',
          '$(PODS_ROOT)/../../node_modules/react-native/React/Fabric',
          '$(PODS_ROOT)/../../node_modules/react-native/React/Fabric/Mounting',
          # Local shim to satisfy <React/RCTComponentViewFactory.h>
          '$(PODS_ROOT)/../ShopIQ/Shims'
        ]
        merged = existing.nil? || existing.empty? ? '$(inherited)' : existing.to_s
        extras.each do |p|
          merged = "#{merged} #{p}" unless merged.include?(p)
        end
        cfg.build_settings['HEADER_SEARCH_PATHS'] = merged
      end
    end
    # Ensure React-RCTAppDelegate can resolve Fabric and react/* headers
    rct_app_delegate_target = pods_project.targets.find { |t| t.name == 'React-RCTAppDelegate' }
    if rct_app_delegate_target
      rct_app_delegate_target.build_configurations.each do |cfg|
        cfg.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        existing = cfg.build_settings['HEADER_SEARCH_PATHS']
        extras = [
          '$(PODS_ROOT)',
          '$(PODS_ROOT)/Headers/Public',
          '$(PODS_ROOT)/Headers/Public/DoubleConversion',
          '$(PODS_ROOT)/Headers/Public/React-Fabric',
          '$(PODS_ROOT)/Headers/Private/React-Fabric',
          '$(PODS_ROOT)/Headers/Public/RCT-Folly',
          '$(PODS_CONFIGURATION_BUILD_DIR)/RCT-Folly/folly.framework/Headers',
          '$(PODS_ROOT)/DoubleConversion',
          '$(PODS_ROOT)/fmt/include',
          '$(PODS_CONFIGURATION_BUILD_DIR)/fmt/fmt.framework/Headers',
          '$(PODS_ROOT)/hermes-engine/destroot/include',
          '$(PODS_ROOT)/Headers/Public/boost',
          '$(PODS_ROOT)/boost',
          # Parent RN path so <ReactCommon/...> resolves
          '$(PODS_ROOT)/../../node_modules/react-native',
          # ReactCommon headers used by <react/...> includes
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/callinvoker',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/runtimeexecutor',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling/react',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling/react/runtime',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components/view',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components/view/platform/cxx',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/nativemodule/core',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/graphics',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/graphics/platform/ios',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-Core/React_Core.framework/Headers/react/renderer/components/view',
          # For <ReactCommon/RCTHost.h>
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/runtime/platform/ios',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-graphics/React_graphics.framework/Headers/react/renderer/graphics',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-RCTFabric/RCTFabric.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-Fabric/React_Fabric.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-logger/React_logger.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/ReactCommon/ReactCommon.framework/Headers',
          # ReactCommon headers for <react/...>
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react'
        ]
        merged = existing.nil? || existing.empty? ? '$(inherited)' : existing.to_s
        extras.each do |p|
          merged = "#{merged} #{p}" unless merged.include?(p)
        end
        cfg.build_settings['HEADER_SEARCH_PATHS'] = merged
      end
    end
    # Ensure RCT-Folly can find Boost headers when building its module
    folly_target = pods_project.targets.find { |t| t.name == 'RCT-Folly' }
    if folly_target
      folly_target.build_configurations.each do |cfg|
        cfg.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        existing = cfg.build_settings['HEADER_SEARCH_PATHS']
        merged = existing.nil? || existing.empty? ? '$(inherited)' : existing.to_s
        ['$(PODS_ROOT)', '$(PODS_ROOT)/Headers/Public', '$(PODS_ROOT)/Headers/Public/DoubleConversion', '$(PODS_ROOT)/DoubleConversion', '$(PODS_ROOT)/fmt/include', '$(PODS_CONFIGURATION_BUILD_DIR)/fmt/fmt.framework/Headers', '$(PODS_ROOT)/boost', '$(PODS_ROOT)/Headers/Public/boost'].each do |p|
          merged = "#{merged} #{p}" unless merged.include?(p)
        end
        cfg.build_settings['HEADER_SEARCH_PATHS'] = merged
      end
    end
    edl_target = pods_project.targets.find { |t| t.name == 'expo-dev-launcher' }
    if edl_target
      edl_target.build_configurations.each do |cfg|
        cfg.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        include_paths = cfg.build_settings['SWIFT_INCLUDE_PATHS']
        extra = '$(PODS_CONFIGURATION_BUILD_DIR)/Expo'
        if include_paths.nil? || include_paths.empty?
          cfg.build_settings['SWIFT_INCLUDE_PATHS'] = "#{extra} $(inherited)"
        elsif !include_paths.include?('Expo')
          cfg.build_settings['SWIFT_INCLUDE_PATHS'] = "#{include_paths} #{extra}"
        end

        # Ensure Expo Swift module and frameworks are discoverable
        fw_paths = cfg.build_settings['FRAMEWORK_SEARCH_PATHS']
        fw_extra = '$(PODS_CONFIGURATION_BUILD_DIR) $(PODS_CONFIGURATION_BUILD_DIR)/Expo $(PODS_CONFIGURATION_BUILD_DIR)/ExpoModulesCore'
        if fw_paths.nil? || fw_paths.empty?
          cfg.build_settings['FRAMEWORK_SEARCH_PATHS'] = "$(inherited) #{fw_extra}"
        else
          needed = ['$(PODS_CONFIGURATION_BUILD_DIR)', '$(PODS_CONFIGURATION_BUILD_DIR)/Expo', '$(PODS_CONFIGURATION_BUILD_DIR)/ExpoModulesCore']
          needed.each do |p|
            cfg.build_settings['FRAMEWORK_SEARCH_PATHS'] = "#{fw_paths} #{p}" unless fw_paths.to_s.include?(p)
          end
        end

        # Ensure ObjC/CPP headers resolve (Expo + RN Fabric + shims)
        hdr_paths = cfg.build_settings['HEADER_SEARCH_PATHS']
        hdr_extras = [
          '$(PODS_ROOT)',
          '$(PODS_ROOT)/Headers/Public',
          '$(PODS_ROOT)/Headers/Public/DoubleConversion',
          '$(PODS_CONFIGURATION_BUILD_DIR)/Expo/Swift\\ Compatibility\\ Header',
          '$(PODS_TARGET_SRCROOT)/Headers/Public',
          '$(PODS_ROOT)/Headers/Private/React-Fabric',
          '$(PODS_ROOT)/Headers/Public/React-Fabric',
          '$(PODS_ROOT)/Headers/Private/React-Core',
          '$(PODS_ROOT)/DoubleConversion',
          '$(PODS_ROOT)/fmt/include',
          '$(PODS_CONFIGURATION_BUILD_DIR)/fmt/fmt.framework/Headers',
          '$(PODS_ROOT)/hermes-engine/destroot/include',
          '$(PODS_ROOT)/Headers/Public/RCT-Folly',
          '$(PODS_CONFIGURATION_BUILD_DIR)/RCT-Folly/folly.framework/Headers',
          '$(PODS_ROOT)/Headers/Public/boost',
          '$(PODS_ROOT)/boost',
          # Parent RN path so <ReactCommon/...> resolves
          '$(PODS_ROOT)/../../node_modules/react-native',
          # ReactCommon headers used by <react/...> includes
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/callinvoker',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/runtimeexecutor',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling/react',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/jsitooling/react/runtime',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components/view',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/components/view/platform/cxx',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/nativemodule/core',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/nativemodule/core/platform/ios',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/graphics',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/renderer/graphics/platform/ios',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-Core/React_Core.framework/Headers/react/renderer/components/view',
          # For <ReactCommon/RCTHost.h>
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react/runtime/platform/ios',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-graphics/React_graphics.framework/Headers/react/renderer/graphics',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-Fabric/React_Fabric.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-RCTAppDelegate/React_RCTAppDelegate.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-RCTFabric/RCTFabric.framework/Headers',
          '$(PODS_CONFIGURATION_BUILD_DIR)/React-logger/React_logger.framework/Headers',
          '$(PODS_ROOT)/../../node_modules/react-native/React',
          '$(PODS_ROOT)/../../node_modules/react-native/React/Fabric',
          '$(PODS_ROOT)/../../node_modules/react-native/React/Fabric/Mounting',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon',
          '$(PODS_ROOT)/../../node_modules/react-native/ReactCommon/react',
          '$(PODS_ROOT)/../ShopIQ/Shims'
        ]
        merged_hdr = hdr_paths.nil? || hdr_paths.empty? ? '$(inherited)' : hdr_paths.to_s
        hdr_extras.each do |p|
          merged_hdr = "#{merged_hdr} #{p}" unless merged_hdr.include?(p)
        end
        cfg.build_settings['HEADER_SEARCH_PATHS'] = merged_hdr

        cfg.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
        cfg.build_settings['SWIFT_VERSION'] = '5.0'
      end

      # Ensure Boost headers are visible via the conventional Public headers path too
      begin
        pods_root = Pod::Config.instance.sandbox_root
        boost_src = File.join(pods_root, 'boost')
        boost_public = File.join(pods_root, 'Headers', 'Public', 'boost')
        if File.directory?(boost_src)
          FileUtils.mkdir_p(File.dirname(boost_public))
          # Create/refresh a symlink so that -I"$(PODS_ROOT)/Headers/Public/boost" works
          FileUtils.rm_f(boost_public)
          FileUtils.ln_sf(boost_src, boost_public)
        end
        dc_src = File.join(pods_root, 'DoubleConversion')
        dc_public = File.join(pods_root, 'Headers', 'Public', 'DoubleConversion')
        if File.directory?(dc_src)
          FileUtils.mkdir_p(File.dirname(dc_public))
          FileUtils.rm_f(dc_public)
          FileUtils.ln_sf(dc_src, dc_public)
        end
      rescue => e
        Pod::UI.warn("Failed to ensure Boost public headers symlink: #{e}")
      end

      # Remove upstream sample AppDelegate that conflicts with the app's AppDelegate
      # (ExpoDevLauncherAppDelegateSubscriber.swift defines its own AppDelegate class)
      begin
        sources_phase = edl_target.source_build_phase
        sources_phase.files.each do |build_file|
          ref = build_file.file_ref
          next unless ref && ref.last_known_file_type&.include?('sourcecode.swift')
          if ref.display_name == 'ExpoDevLauncherAppDelegateSubscriber.swift'
            sources_phase.remove_file_reference(ref)
          end
        end
      rescue => e
        Pod::UI.warn("Failed to prune ExpoDevLauncherAppDelegateSubscriber.swift: #{e}")
      end

      # Ensure build order: expo-dev-launcher depends on Expo so `import Expo` resolves
      if expo_target
        existing = edl_target.dependencies.map { |d| d.target.name }
        unless existing.include?('Expo')
          edl_target.add_dependency(expo_target)
        end
      end
    end
  end
end
